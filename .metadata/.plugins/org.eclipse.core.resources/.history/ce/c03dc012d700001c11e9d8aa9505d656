/*
* nios_spi_1.c
*
* Created on: Oct 22, 2018
* Author: johnsontimoj
*/
/////////////////////////////////
//
// SPI with NIOS loopback example - no spi_command
//
////////////////////////////////
#include "alt_types.h"
#include "altera_avalon_spi_regs.h"
#include "altera_avalon_spi.h"
#include "system.h"
#include <stdio.h>
#include <unistd.h>// usleep
int main(void){
printf("Entered Main\n");
alt_u8 send_M;
alt_u8 send_S;
alt_u8 rcvd_S;
alt_u8 rcvd_M;
alt_u8 count;
count = 0;
while(1){
	if(count == 1){
		send_M = 0x01;
		send_S = 0x01;
		// Load Slave TX buffer THEN load Master TX buffer
		// loading master TX causes transmission to start
		//
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_SLAVE_BASE, send_S);
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_MASTER_BASE, send_M);
		// Wait for transfer to complete
		//
		usleep(75);
		// Read Master and Slave RX buffers
		//
		rcvd_S = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_SLAVE_BASE);
		rcvd_M = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_MASTER_BASE);
		// Print results
		printf("master sent = %i\tslave recv'd = %i\n", send_M, rcvd_S);
		printf("slave sent = %i\tmaster recv'd = %i\n", send_S, rcvd_M);
	}else if(count == 2){
		send_M = 0x03;
		send_S = 0x03;
		// Load Slave TX buffer THEN load Master TX buffer
		// loading master TX causes transmission to start
		//
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_SLAVE_BASE, send_S);
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_MASTER_BASE, send_M);
		// Wait for transfer to complete
		//
		usleep(75);
		// Read Master and Slave RX buffers
		//
		rcvd_S = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_SLAVE_BASE);
		rcvd_M = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_MASTER_BASE);
		// Print results
		printf("master sent = %i\tslave recv'd = %i\n", send_M, rcvd_S);
		printf("slave sent = %i\tmaster recv'd = %i\n", send_S, rcvd_M);
	}else if(count == 3){
		send_M = 0x07;
		send_S = 0x07;
		// Load Slave TX buffer THEN load Master TX buffer
		// loading master TX causes transmission to start
		//
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_SLAVE_BASE, send_S);
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_MASTER_BASE, send_M);
		// Wait for transfer to complete
		//
		usleep(75);
		// Read Master and Slave RX buffers
		//
		rcvd_S = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_SLAVE_BASE);
		rcvd_M = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_MASTER_BASE);
		// Print results
		printf("master sent = %i\tslave recv'd = %i\n", send_M, rcvd_S);
		printf("slave sent = %i\tmaster recv'd = %i\n", send_S, rcvd_M);
	}

// Setup for next loop
count ++;
usleep(1000000);
} // end while
return 0;
} // end main
